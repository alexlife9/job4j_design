package ru.job4j.collection;

import java.util.*;

/**
 * Динамический список на массиве
 *
 * @author Alex_life
 * @version 2.0
 * 1.Логику увеличения размера контейнера вынес в отдельный приватный метод.
 * 2.Сделал в нем возможность увеличить массив с длиной, равной 0.
 * 3.Валидацию индекса надо сделал в рамках добавленных элементов, вместо проводения в границах всего контейнера.
 * 4.В методе remove() после сдвига ячеек влево обнулил последнюю ячейку контейнера.
 * 5.Изменил условие в методе hasNext на size. Потому что счетчик modCount это счетчик структурных изменений,
 * он может быть гораздо больше, чем количество элементов контейнера.
 * 6. В методах set() и remove() было дублирование кода с методом get() - вызвал его в нужных местах.
 * @since 04.07.2022
 */
public class SimpleArrayList<T> implements SimpleList<T> {

    /**
     * Внутри контейнер должен базироваться на массиве Object[] container.
     * Контейнер должен быть динамическим, т.е. при полном заполнении увеличиваться.
     * Увеличивать массив надо в два раза, потому что расширение это тяжелая операция
     */
    private T[] container;

    /**
     * Количество элементов - это показатель, который нам говорит, сколько элементов в коллекции на данный момент.
     * Переменную, которая будет отвечать за это число можно применять
     * для размещения элементов (если говорить про динамический массив).
     */
    private int size;

    /**
     * Количество изменений - это показатель, который нам говорит, сколько раз коллекция была изменена с момента
     * ее создания. Например, вы создали коллекцию. Добавили в нее элемент, а потом удалили его.
     * Сколько элементов в коллекции? 0, а сколько раз ее изменили? 2 раза.
     * Это показатель всегда растет. При добавлении и удалении.
     * Его используют для того, чтобы на момент итерирования коллекцию держать в определенном (defined) состоянии,
     * иначе если во время итерирования был вставлен элемент, а мы его обойти не смогли значит наш итератор
     * работает не корректно (на самом деле состояние коллекции не определено точно).
     */
    private int modCount;

    public SimpleArrayList(int capacity) {
        this.container = (T[]) new Object[capacity];
    }

    /**
     * метод add добавляет указанный элемент в конец этого списка
     * @param value - добавляемый элемент
     *
     * при добавлении элемента увеличиваем счетчик изменений
     * вызываем метод проверки (и увеличения в случае необходимости) длины контейнера
     * увеличиваем размер коллекции
     */
    @Override
    public void add(T value) {
        modCount++;
        overSize(value);
        size++;
    }

    /**
     * метод set замеяет элемент по указанному индексу новым элементом
     * @param index - индекс по которому надо поменять элемент
     * @param newValue - значение нового элемента
     * @return возвращат старый элемент
     */
    @Override
    public T set(int index, T newValue) {
        modCount++;
        T log = get(index);
        container[index] = newValue;
        return log;
    }

    /**
     * Для удаления нужно использовать метод System.arraycopy()
     * Физически удалить элемент из массива мы также не можем,
     * поэтому под удалением подразумевается сдвиг части элементов правее индекса, по которому удаляем вправо.
     * после удаления элемента обнуляем последнюю ячейку
     * @param index - индекс "удаляемого" элемента
     * @return возвращает удаленный элемент
     */
    @Override
    public T remove(int index) {
        modCount++;
        T log = get(index);
        System.arraycopy(container, index + 1, container, index, container.length - index - 1);
        container[container.length - 1] = null;
        size--;
        return log;
    }

    /**
     * Индекс должен находиться в рамках добавленных элементов. Например, у вас есть хранилище из 10 элементов.
     * Вы добавили 3 элемента. Каким может быть индекс? [0, 2].
     * Для проверки индекса используется метод Objects.checkIndex()
     * @param index текущего элемента
     * @return возвращает значение элемента
     */
    @Override
    public T get(int index) {
        Objects.checkIndex(index, size);
        T value = container[index];
        return value;
    }

    /**
     * @return Возвращает количество элементов в контейнере.
     */
    @Override
    public int size() {
        return size;
    }

    /**
     * Итератор должен реализовывать fail-fast поведение, т.е. если с момента создания итератора в коллекцию
     * добавили новый элемент, итератор должен кидать ConcurrentModificationException.
     * Это достигается через введение счетчика изменений - modCount. Каждая операция, которая структурно модифицирует
     * (добавление и удаление элементов) коллекцию должна увеличивать этот счетчик. В свою очередь итератор запоминает
     * значение этого счетчика на момент своего создания (expectedModCount), а затем на каждой итерации сравнивает
     * сохраненное значение, с текущим значением поля modCount, если они отличаются, то генерируется исключение.
     *
     * Итератор должен кидать два исключения:
     * 1) NoSuchElementException. Относится к первому показателю - количеству элементов. Тут просто.
     * Если итератор "уперся", т.е. нет больше элементов, а клиент вызвал этот метод,
     * то этим исключение мы ему подчеркиваем, что элементов больше нет.
     * Такое поведение отлично демонстрируют задания из блока Iterator.
     * 2) ConcurrentModificationException. Относится ко второму показателю - числу модификаций.
     * Чтобы кинуть это исключение заводят отдельную переменную в итераторе expectedModCount = modCount
     * и проверяют условие if (expectedModCount != modCount). Если условие выполнено,
     * значит на момент итерирования была изменена коллекция, поэтому вылетает исключение.
     * Это называется fail-fast поведение
     * Вывод. Чтобы реализовать итератор вам нужны два поля. Каждое отвечает за свой показатель.
     * @return возвращает итератор по элементам
     */
    @Override
    public Iterator<T> iterator() {
        return new Iterator<T>() {
            private int point = 0;
            private final int expectedModCount = modCount;

            /**
             * метод hasNext устанавливает указатель на нужный элемент и проверяет существует ли он вообще
             * @return возвращает true если указатель меньше размера списка(значит существует)
             */
            @Override
            public boolean hasNext() {
                if (expectedModCount != modCount) {
                    throw new ConcurrentModificationException();
                }
                return point < size;
            }

            /**
             * метод next возвращает элемент который вызвали, следующий вызов - возвращает следующий элемент
             * @return возвращает вызванный элемент и сдвигает курсор на следующую ячейку
             */
            @Override
            public T next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                return container[point++];
            }
        };
    }

    /**
     * метод overSize увеличивает размер контейнера в 2 раза, даже если массив был нулевой длины.
     * @param value - добавляемый элемент
     */
    private void overSize(T value) {
        if (size == container.length) {
            container = Arrays.copyOf(container, (container.length + 1) * 2);
        }
        container[size] = value;
    }
}
